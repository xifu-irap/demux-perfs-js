//
//  Copyright (C) 2021-2030 Laurent Ravera, Christophe Oziol, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  demux-perfs-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//  laurent.ravera@irap.omp.eu
//  configure_demux.dscript
//

include("./tools.dscript")
include("./constants.dscript")


function configure_demux(Ki, column_ID){

	switch (DRE_FirmwareId) {
		case 0x0013:
			KiNorm = Math.pow(2,15)
			FB_compens_gain=36660
			error_fine_delay=5
			startup_pix=0
			feedback_pix=13
			break
		case 0x0012:
			KiNorm = Math.pow(2,15)
			FB_compens_gain = Math.pow(2,16)-1
			error_fine_delay= 4
			startup_pix=0
			feedback_pix=13
			break
		case 0x0011:
			KiNorm = Math.pow(2,15)
			FB_compens_gain = Math.pow(2,16)-1
			error_fine_delay= 4
			startup_pix=0
			feedback_pix=13
			break
		case 0x000F: 
			KiNorm = 1208
			FB_compens_gain = 3950
			error_fine_delay = 9
			startup_pix=0
			feedback_pix=11
			break
		default:
			print("Unknown firmware id. Can't define configuration.")
		}

	// DRE TDM STOP
	DRE_Start_Stop_CMD(0)

	// Switching ADC ON
	DRE_ADC_ON(column_ID,1)

	// Configuring DAC outputs :
	// Possible signals are: feedback, sq2_offset, function_out, sinus_out
	DRE_select_output_DACSQ1_CMD(column_ID,"feedback")
	DRE_select_output_DACSQ2_CMD(column_ID,"sq2_offset")
	
	SQ1_fine_delay = 3		
	SQ2_fine_delay = 3
	//------------------------------------
	SQ2offset = parseInt(DAC_peak)
	sinus_increment = 1000
	sinus_amplitude = 255
	sinus_on_off = 0
	
	// Setting of delays and gains
	DRE_configure_column_compensation_gain(column_ID,FB_compens_gain)
	DRE_configure_column_startup_pix(column_ID,startup_pix)
	DRE_configure_column_feedback_pix(column_ID,feedback_pix)
	DRE_configure_ERROR_ADC_DELAY(column_ID,error_fine_delay)
	DRE_configure_SQ1_DELAY(column_ID,SQ1_fine_delay)
	DRE_configure_SQ2_DELAY(column_ID,SQ2_fine_delay)
	
	// Configuring SQ2offset for all pixels
	for (index = 0;index < 34;index++){
			DRE_configurePixel_SQ2offset(column_ID,index,SQ2offset)
			print("Pixel("+ index +") SQ2offset set to : " + SQ2offset)
			waitMs(10)
		}
		
	// select input for TDM DRE : error signal from ADC 
	DRE_select_input_CMD(column_ID,"error_ADC")

	// Switching ON DAC SQ1 (command parameters : Column 0 to 3, DACsq2_on: 1,0) 
	DRE_DACSQ1_ON(column_ID,On)
	// Switching OFF DAC SQ2 (command parameters : Column 0 to 3, DACsq2_on: 1,0) 
	DRE_DACSQ2_ON(column_ID,Off)
	
	// Enable feedback OUT of TDM DRE	
	DRE_feedback_enable_CMD(column_ID,On)

	//Configuring Ki and starting the feedback
	// This is done in two step to avoid an unlock when starting with ki>1
	DRE_Start_Stop_CMD(column_ID, Start, KiNorm) // Using KiNorm to avoid over ranges at startup
	DRE_configureAllPixels_Ki(column_ID, KiNorm*Ki)

	//-----------------------------------------------
	// DRE column commands SINUS Generator  
	//------------------------------------------------
	DRE_SINUS_GENE(column_ID,sinus_amplitude,sinus_increment,sinus_on_off)
}

	//-----------------------------------------------
