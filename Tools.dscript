//
//  Copyright (C) 2021-2030 Laurent Ravera, Christophe Oziol, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  demux-perfs-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//  laurent.ravera@irap.omp.eu
//  tools.dscript
//

// const DAC AD9726 modes
FACTORY_CALIBRATED = 0
SELF_CALIBRATED = 1
UNCALIBRATED = 2

//---------------------------------------------------------------------------------------------------------------------------------------

function nom_de_ma_fonction(my_parameter)
{	
	address = TBD;
	value = my_parameter;
    sendNewRegister(address,value)
	waitMs(WAITING_TIME)
}
// --------------------------------------------------------------
// ------------------DRE general commands ADDR 0x8xxx------------
// --------------------------------------------------------------

//-----------------------------------------------
// DRE general commands select HK for FPGA data sending
//-----------------------------------------------
function DRE_select_HK_CMD(Select_HK)
// 1 inputs
{
	switch (Select_HK) 
		{
		case "ADC128":
			value = 0
			break
		case "ADC128_AUTO":
			value = 1
			break
		case "CONF":
			value = 2
			break
		case "COUNT":
			value = 3
			break
		default:
			value = 0
		}
		address = 0x8000;
    sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE general commands start sending HK for FPGA data sending
//-----------------------------------------------

function DRE_Start_sending_HK_CMD(Start_sending_HK )
// 1 inputs
{
		address = 0x8001;
	value = Start_sending_HK;
    sendNewRegister(address,value);
	waitMs(10);
}

//-----------------------------------------------
// DRE general commands select TM for FPGA data sending
//-----------------------------------------------
function DRE_select_TM_CMD(Select_TM)
// 1 inputs
{
	address = 0x8002;
	value = Select_TM;
    sendNewRegister(address,value);
	waitMs(10);
}

//-----------------------------------------------
// DRE general commands start sending TM for FPGA data sending
//-----------------------------------------------
function DRE_Start_sending_TM_CMD(Start_sending_TM)
// 1 inputs
{
	address = 0x8003;
	value = Start_sending_TM;
    sendNewRegister(address,value);
	waitMs(10);
}
//-----------------------------------------------
// DRE general commands select and start sending TM for FPGA data sending
// and start GSE acqusition possible select_TM : 
// DP_DACSQ1_SCIENCE DP_ERROR_5MHZ_SCIENCE DP_DACSQ2_SCIENCE DP_DACSQ1_DACSQ2
// DP_ERROR_ADC DP_FEEDBACK_5MHz SCIENCE DP_ERROR_5MHz_FEEDBACK COUNT
//-----------------------------------------------
function DRE_Start_sending_TM_Selected_CMD(Select_TM)
// 1 inputs
{
	switch (Select_TM) 
		{
		case "DACSQ1_SCIENCE":
			Select_TM_value = 0
			break
		case "ERROR5MHZ_SCIENCE":
			Select_TM_value = 1
			break
		case "DACSQ2_SCIENCE":
			Select_TM_value = 2
			break
		case "DACSQ1_DACSQ2":
			Select_TM_value = 4
			break
		case "ERROR_ADC":
			Select_TM_value = 5
			break
		case "FEEDBACK5MHZ":
			Select_TM_value = 6
			break
		case "SCIENCE_TM":
			Select_TM_value = 8
			break
		case "ERROR5MHZ_FEEDBACK":
			Select_TM_value = 9
			break
		case "COUNT32":
			Select_TM_value = 15
			break
		default:
			Select_TM_value = 0
		}	
	DRE_select_TM_CMD(Select_TM_value);
	Start_Sending_TM_l = Math.pow(2,7);
	Start_Sending_TM_mask	= 0x1;
	Select_TM_l = Math.pow(2,3);
	Select_TM_mask = 0xF;
	address = 0;
	Start_Sending_TM =1;
	value = (Start_Sending_TM & Start_Sending_TM_mask) * Start_Sending_TM_l
	+ (Select_TM_value & Select_TM_mask) * Select_TM_l;
	
	sendConfigureDREOneRegister(address, value);
	waitMs(10);
	address = 0x8003;
	value 	= 1;
    sendNewRegister(address,value);
	waitMs(10);
}

//-----------------------------------------------
// DRE general commands stop sending TM for FPGA data sending
//-----------------------------------------------
function DRE_Stop_sending_TM_CMD()
// 0 inputs
{
/*	address = 0;
	value = 0;
	
	sendConfigureDREOneRegister(address, value);*/
	address = 0x8003;
	value = 0;
    sendNewRegister(address,value);
	waitMs(10);
}

//-----------------------------------------------
// DRE general commands start_stop 
//-----------------------------------------------
function DRE_Start_Stop_CMD(column_ID, Start_Stop, KiNorm)
{
	DRE_configureAllPixels_Ki(column_ID, KiNorm) // Using KiNorm to avoid over ranges at startup

	address = 0x8004;
	value = Start_Stop;
    sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE general commands clk source selection from the DAC or from the FPGA_BOARD
//-----------------------------------------------

function DRE_CLK_CDCM_SELECT_CMD(CLK_CDCM_SELECT )
// 1 inputs
{
	address = 0x8005;
	value = CLK_CDCM_SELECT ;
    sendNewRegister(address,value)
	waitMs(10)
}
//-----------------------------------------------
// DRE general commands CDCM Clock_RESET
//-----------------------------------------------
function DRE_CLK_CDCM_PLL_RESET_CMD(CLK_CDCM_PLL_RESET)
// 1 inputs
{
	address = 0x8006;
	value = CLK_CDCM_PLL_RESET;
    sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE CONFIGURE CDCM 
//-----------------------------------------------
function DRE_CDCM_CONFIG_CMD()
{
	DRE_WRITE_SPI_CMD("CDCM_SPI",0x0028A060)
	waitMs(10)
	DRE_WRITE_SPI_CMD("CDCM_SPI",0x0008803D)
	waitMs(10)
	//select output frequencies:
	print("Setting ADC clock to 39.0625MHz and DACs clocks to 78.125MHz")  //  (default)
	DRE_WRITE_SPI_CMD("CDCM_SPI",0xD60130A2)
//	print("Setting ADC clock to 19.53MHz and DACs clocks to 78.125MHz")  //  (default)
//	DRE_WRITE_SPI_CMD("CDCM_SPI",0xDA0130A2)
	waitMs(10)
	DRE_WRITE_SPI_CMD("CDCM_SPI",0x00000027)
	waitMs(10)
}
//-----------------------------------------------
//---------------DAC RESET-----------------------
//-----------------------------------------------

function DRE_RESET_DAC_AD9726()
{
	///// AD9726 Reset
	print("Reset DAC AD9726 ...")
	
    sendNewRegister(0x800B,0x1)
	waitMs(10)
    sendNewRegister(0x800B,0x0)
	waitMs(10)
}

//-----------------------------------------------
// DRE general commands DRE_WRITE_SPI_CMD write to CHANNEL_NAME the DATA_SPI(32b)
//-----------------------------------------------

function DRE_WRITE_SPI_CMD(CHANNEL_NAME,DATA_SPI)
// 1 inputs
{
	switch (CHANNEL_NAME) 
		{
		case "DACSQ2_SPI":
			value = 0
			break
		case "DACSQ1_SPI":
			value = 1
			break
		case "CDCM_SPI":
			value = 4
			break
		default:
			value = 0
		}
	address = 0x8007;
    sendNewRegister(address,value)
	waitMs(20)
	address = 0x800A;
	DATA_MSB = ((DATA_SPI >> 16) & 0x0000FFFF);
	DATA_LSB = DATA_SPI & 0x0000FFFF;
    sendNewRegister(address,DATA_MSB)
	waitMs(10)
	address = 0x8009;
    sendNewRegister(address,DATA_LSB)
	waitMs(10)
	address = 0x8008;
    sendNewRegister(address,0x1)
	waitMs(10)
	address = 0x8008;
    sendNewRegister(address,0x0)
}

//-----------------------------------------------
//---------------COLUMN COMMANDS ADDR 0x000n-----
//-----------------------------------------------

//-----------------------------------------------
// DRE column commands feedback_enable of the selected column
//-----------------------------------------------
function DRE_feedback_enable_CMD(column,feedback_enable)
// 2 inputs
{
	base_address = 0x0002;
	address =base_address + column*Math.pow (2,13)
	value = feedback_enable;
    sendNewRegister(address,value)
	waitMs(10)
}
//-----------------------------------------------
// DRE column commands select_input of the selected column
//-----------------------------------------------
function DRE_select_input_CMD(column,select_input)
// 2 inputs
{
	switch (select_input) 
		{
		case "error_ADC":
			value = 0
			break
		case "FPA_sim":
			value = 1
			break
		default:
			value = 0
		}
	base_address = 0x0001;
	address =base_address + column*Math.pow (2,13)
    sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands comensation gain configuration
//-----------------------------------------------

function DRE_configure_column_compensation_gain(column,gain)
{
	base_address =0x0003;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+gain+ " feedback compensation gain set")
	sendNewRegister(address,gain)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands startup pixel beging number
//-----------------------------------------------
function DRE_configure_column_startup_pix(column,value)
{
	base_address =0x0004;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+value+ " startup pixel set")
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands feedback pixel beging number
//-----------------------------------------------
function DRE_configure_column_feedback_pix(column,value)
{
	base_address =0x0005;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+value+ " feedback pixel set")
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands ERROR_ADC DELAY
//-----------------------------------------------
function DRE_configure_ERROR_ADC_DELAY(column,value)
{
	base_address =0x0006;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+value+ " feedback pixel set")
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SQ1 DELAY
//-----------------------------------------------
function DRE_configure_SQ1_DELAY(column,value)
{
	base_address =0x0019;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+value+ " fine_delay SQ1 set")
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SQ2 DELAY
//-----------------------------------------------
function DRE_configure_SQ2_DELAY(column,value)
{
	base_address =0x001A;	
	address =base_address + column*Math.pow (2,13);
	print (address+" : "+value+ " ffine delay SQ2 set")
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands send_function of the selected column always or not
//-----------------------------------------------

function DRE_send_function_CMD(column,send_function,always)
{
	base_address = 0x0008;
	address =base_address + column*Math.pow (2,13)
	value = always;
	sendNewRegister(address,value)
	waitMs(10)
	base_address = 0x0007;
	address =base_address + column*Math.pow (2,13)
	value = send_function;
    sendNewRegister(address,value)
	waitMs(10)
}
//-----------------------------------------------
// DRE column commands function patern amplitude of the selected column
//-----------------------------------------------

function DRE_function_amplitude_CMD(column,value)
{
	base_address = 0x0009;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands function patern timescale
//-----------------------------------------------
function DRE_function_timescale_CMD(column,value)
{
	base_address = 0x000A;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands select_output_DACSQ1 of the selected column
//-----------------------------------------------

function DRE_select_output_DACSQ1_CMD(column,select_output_DACSQ1)
{
	switch (select_output_DACSQ1) 
		{
		case "feedback":
			value = 0
			break
		case "sq2_offset":
			value = 1
			break
		case "function_out":
		value = 2
		break
		case "sinus_out":
		value = 3
		break
		default:
			value = 0
		}
	base_address =0x000C;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands select_output_DACSQ2 of the selected column
//-----------------------------------------------

function DRE_select_output_DACSQ2_CMD(column,select_output_DACSQ2)
{
	switch (select_output_DACSQ2) 
		{
		case "feedback":
			value = 0
			break
		case "sq2_offset":
			value = 1
			break
		case "function_out":
		value = 2
		break
		case "sinus_out":
		value = 3
		break
		default:
			value = 0
		}
	base_address =0x000D;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}
//-----------------------------------------------
// DRE column commands DACSQ1 Out ON/OFF
//-----------------------------------------------

function DRE_DACSQ1_ON(column,value)
{
	base_address =0x00E;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands DACSQ2 Out ON/OFF
//-----------------------------------------------
function DRE_DACSQ2_ON(column,value)
{
	base_address =0x00F;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands ADC Out ON/OFF
//-----------------------------------------------
function DRE_ADC_ON(column,value)
{
	base_address =0x010;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands ADC DFSB
//-----------------------------------------------
function DRE_ADC1_DFSB(column,value)
{
	///// Sets DFSB=1 (ADC signed/unsigned)
//	sendConfigureDREOneRegister(0xAD,(0x40000000+val*Math.pow(2,24)))//0x41000000
	base_address =0x0011;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SINUS Generator set amplitude
//-----------------------------------------------------------------------------
function DRE_SINUS_GENE_AMPLITUDE(column,value)
{
	base_address =0x0016;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SINUS Generator set increment
//-----------------------------------------------------------------------------
function DRE_SINUS_GENE_INCREMENT(column,value)
{
	base_address =0x0017;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SINUS Generator on
//-----------------------------------------------------------------------------
function DRE_SINUS_GENE_ON(column,value)
{
	base_address =0x0018;
	address =base_address + column*Math.pow (2,13)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// DRE column commands SINUS Generator  
//-----------------------------------------------------------------------------
function DRE_SINUS_GENE(column,amplitude,increment,on_off)
{
	DRE_SINUS_GENE_AMPLITUDE (column,amplitude);
	DRE_SINUS_GENE_INCREMENT(column,increment);
	DRE_SINUS_GENE_ON(column,on_off); 
}

//-----------------------------------------------
//----------DRE column/PIXEL commands------------
//-----------------------------------------------

//-----------------------------------------------
// Configuratoin of a ki value to a single pixel
//-----------------------------------------------
function DRE_configurePixel_Ki(column,index,Ki)
{
	base_address =0x1000;	
	address =base_address + column*Math.pow (2,13) + index*Math.pow(2,6)+0;
	sendNewRegister(address,Ki)
	waitMs(10)
}

//-----------------------------------------------
// Configuration of a ki value for all the pixels
//-----------------------------------------------
function DRE_configureAllPixels_Ki(column_ID,Ki)
{
	print("Configuring ki for all pixels to: "+Ki+" ...")
	for (index = 0;index < 34;index++){
		DRE_configurePixel_Ki(column_ID,index,Ki)
		}
}

//-----------------------------------------------
// Configuration of a specific sequence of Ki values (alternate 2 values)
//-----------------------------------------------
function configure_alternates_Ki(column_ID, Ki1, Ki2)
{
	print("Configuring a sequence of alternative Ki values: "+Ki1+" and "+Ki2)
	for (index=0; index < 17; index++) {
		DRE_configurePixel_Ki(column_ID,index*2,Ki1)
		DRE_configurePixel_Ki(column_ID,index*2+1,Ki2)
		}
}

//-----------------------------------------------
// Configuration of a specific sequence of Ki values (2 successive sets of values)
//-----------------------------------------------
function configure_2_groups_of_Ki(column_ID, Ki1, Ki2)
{
	print("Configuring 2 successive sets of values for Ki : "+Ki1+" and "+Ki2)
	for (index=0; index < 17; index++) {
		DRE_configurePixel_Ki(column_ID,index,Ki1)
		}
	for (index=17; index < 34; index++) {
		DRE_configurePixel_Ki(column_ID,index,Ki2)
		}
}

//-----------------------------------------------
// Configuration of a kmix value to a single pixel
//-----------------------------------------------
//function DRE_configurePixel_Kmix(column,index,Kmix)
//{
//	base_address =0x1000;	
//	address=base_address + column*Math.pow(2,13) + index*Math.pow(2,6)+1;
//	sendNewRegister(address,Kmix)
//	waitMs(10)
//}

//-----------------------------------------------
// Configuration of a kmix value for all the pixels
//-----------------------------------------------
//function DRE_configureAllPixels_Kmix(column_ID,Kmix)
//{
//	print("Configuring kmix for all pixels to: "+Kmix+" ...")
//	for (index = 0;index < 34;index++){
//		DRE_configurePixel_Kmix(column_ID,index,Kmix)
//		}
//}

//-----------------------------------------------
// DRE column/PIXEL SQ2offset(index) Configuration
//-----------------------------------------------
function DRE_configurePixel_SQ2offset(column,index,SQ2offset)
{
base_address =0x1000;	
address =base_address + column*Math.pow(2,13) + index*Math.pow(2,6)+2;
print (address+" : "+SQ2offset +" SQ2offset pixel("+index+")")
	sendNewRegister(address,SQ2offset)
	waitMs(10)
}

//-----------------------------------------------
// DRE column/FPA_sim PIXEL V0(index) Configuration
//-----------------------------------------------
function DRE_configurePixel_FPA_V0(column,index,V0)
{
	base_address =0x1000;	
	address =base_address + column*Math.pow(2,13) + index*Math.pow(2,6)+3;
	print (address+" : "+V0+ " V0 pixel_FPA("+index+")")
	sendNewRegister(address,V0)
	waitMs(10)
}

//-----------------------------------------------
// DRE column/FPA_sim PIXEL VP(index) Configuration
//-----------------------------------------------
function DRE_configurePixel_FPA_VP(column,index,VP)
{
	base_address =0x1000;	
	address =base_address + column*Math.pow(2,13) + index*Math.pow(2,6)+5;
	print (address+" : "+VP +" VP pixel_FPA("+index+")")
	sendNewRegister(address,VP)
	waitMs(10)
}

//-----------------------------------------------
// DRE column/FPA_sim Write VP Configuration
//-----------------------------------------------
function DRE_configurePixel_FPA_WriteVP(column,value)
{
	base_address =0x0015;	
	address =base_address + column*Math.pow (2,13);
	print (address+" :  WRITE VP FPA = "+ value)
	sendNewRegister(address,value)
	waitMs(10)
}

//-----------------------------------------------
// --------------DRE FPA_SIM COMMANDS -----------
//-----------------------------------------------
// DRE FPA_SIM Clear ALL PIXELS V0 and VP
//-----------------------------------------------

function DRE_FPA_clearRegister()
{
for (index = 0;index < 34;index++){
		DRE_configurePixel_FPA_V0(0,index,0)
		print("Pixel("+index+") V0 CLEARED")
		DRE_configurePixel_FPA_VP(0,index,0)
		print("Pixel("+index+") VP CLEARED")
	}
}

//-----------------------------------------------
// MACRO DE CONFIGURATION AD9726 dacmod
//-----------------------------------------------
function DRE_CONFIG_DACS_AD9726()
{
	// determination du mode DAC
	getLatestValue("DRE_DACMode")
	modeStr =  DRE_DACMode.toUpperCase()
	if (modeStr.indexOf("SELF")>=0)
	{
		dacMode = SELF_CALIBRATED
	}
	else if (modeStr.indexOf("UNCALIBRATED")>=0)
	{
		dacMode = UNCALIBRATED
	}
	else
	{
		dacMode = FACTORY_CALIBRATED
	}
	
	// configuration des DACs
	// AD9726_DACSQ2
	DRE_CONFIG_DAC_AD9726(dacMode,"DACSQ2_SPI")
	// AD9726_DACSQ1
	DRE_CONFIG_DAC_AD9726(dacMode,"DACSQ1_SPI")
}

//-----------------------------------------------
// MACRO DE CONFIGURATION AD9726 sending default values
//-----------------------------------------------
function DRE_CONFIG_DAC_AD9726(dacMode,dacSelection)
{
	DRE_WRITE_SPI_CMD(dacSelection,0x00000000) //	sendConfigureDREOneRegister(0xAE,0x00000000)
	waitMs(10)
	DRE_WRITE_SPI_CMD(dacSelection,0x00000260)	//sendConfigureDREOneRegister(0xAE,0x00000260)
	waitMs(10)
	DRE_WRITE_SPI_CMD(dacSelection,0x00000E00)	//	sendConfigureDREOneRegister(0xAE,0x00000E00)
	waitMs(10)
	DRE_CONFIG_DAC_AD9726_MODE(dacMode,dacSelection)
	waitMs(10)	
	DRE_WRITE_SPI_CMD(dacSelection,0x00001640)	//	sendConfigureDREOneRegister(0xAE,0x00001640)
	waitMs(10)
}

//-----------------------------------------------
// MACRO DE CONFIGURATION AD9726 sending selected dacmod
//-----------------------------------------------
function DRE_CONFIG_DAC_AD9726_MODE(dacMode,dacSelection)
{
	DRE_WRITE_SPI_CMD(dacSelection,0x00000F00) //	sendConfigureDREOneRegister(0xAE,0x00000F00)
	waitMs(10)
	
	if (dacMode == SELF_CALIBRATED)
	{
		print("Configuring DAC AD9726 to Self calibrated mode")
	DRE_WRITE_SPI_CMD(dacSelection,0x00000F40) //		sendConfigureDREOneRegister(0xAE,0x00000F40)
		waitMs(10)
	}
	else if (dacMode == UNCALIBRATED)
	{
		print("Configuring DAC AD9726 to Uncalibrated mode")
	DRE_WRITE_SPI_CMD(dacSelection,0x00000F01) //		sendConfigureDREOneRegister(0xAE,0x00000F01)
		waitMs(10)
	}
	else //  FACTORY_CALIBRATED
	{
		print("Configuring DAC AD9726 to Factory calibrated mode")
	DRE_WRITE_SPI_CMD(dacSelection,0x00000F10) //		sendConfigureDREOneRegister(0xAE,0x00000F10)
		waitMs(200)
	}
}

//-----------------------------------------------
// MACRO RESET MMCM
//-----------------------------------------------
function DRE_RESET_MMCM()
{
	///// FPGA MMCM Reset
	print("Reset FPGA MMCM ...")
	DRE_CLK_CDCM_PLL_RESET_CMD(1)
	waitMs(10)
	DRE_CLK_CDCM_PLL_RESET_CMD(0)
	waitMs(10)
}

//-----------------------------------------------
// MACRO select CDCM FPGA Clock
//-----------------------------------------------
function DRE_CLK_SELECT()
{
	///// CLOCK SELECT ON THE CLK provided by the DACSQ1(ch1)
	print("CLK SWITCHED TO DACSQ1 (ch0)...")
	DRE_CLK_CDCM_SELECT_CMD(1)
	waitMs(10)
}

//-----------------------------------------------
// MACRO STARTUP CDCM DAC ADC and change CLOCK source
//-----------------------------------------------
function DRE_Startup()
// sequence required to startup the DRE-DEMUX
{
	DRE_CDCM_CONFIG_CMD()
	waitMs(100)
	DRE_RESET_DAC_AD9726()
	waitMs(100)
	DRE_CONFIG_DACS_AD9726()
	waitMs(100)
	DRE_CLK_CDCM_PLL_RESET_CMD(1)
	waitMs(10)
	DRE_CLK_CDCM_PLL_RESET_CMD(0)
	waitMs(100)
	DRE_CLK_SELECT()
	waitMs(100)
	DRE_ADC1_DFSB(0,0)
	waitMs(100)
}

//-----------------------------------------------
// GUI to read operator name
//-----------------------------------------------
function get_operator_name()
{
	OperatorTab = ["", "Laurent", "Odile", "David", "Bernard", "Wilfried", "Christophe", "Yann"]
	OperatorId = getItem("Please, select the operator name:", OperatorTab)
	if (OperatorId == -1) {
		Operator_name = getText("Please, type the operator name:", "")
		} else {
		Operator_name = OperatorTab[OperatorId]
		}
	return(Operator_name)
}

//-----------------------------------------------
// GUI to read session name
//-----------------------------------------------
function get_session_name()
{
	session_name = getText("Please, type the session name:", "Default_session_name")
	return(session_name)
}

////////////////////////////////////////////// GENERIC TOOLS /////////////////////////////////////

function maDate()
// Returns the date using the format : yearmonthday_hourminutesecond
{
	var d = new Date();
	var Now_date = d.getFullYear()+(("00" +(d.getMonth()+1).toString()).slice(-2))+(("00" +(d.getDate()).toString()).slice(-2))+"_"+(("00" +(d.getHours()).toString()).slice(-2))+(("00" +(d.getMinutes()).toString()).slice(-2))+(("00" +(d.getSeconds()).toString()).slice(-2))
	return Now_date
}

const __MemorizedParameters = ""

//---------------------------------------------------------------------------------------------------------------------------------------
function setAndMemorize(string,value)
{
	__MemorizedParameters = __MemorizedParameters + string+"="+value+"\n"
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveMemorizedParametersToBackupDir(filename)
{
	saveStringToBackupDir(__MemorizedParameters,filename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveStringToBackupDir(filecontent,filename)
{
	saveFileContent("temp.txt")
	clearFileContent()
	addToFile(filecontent)
	getLatestValue("DISP_BackupsCurrentDirectory")
	saveFileContent(DISP_BackupsCurrentDirectory + "\\" + filename)
	loadFileContent("temp.txt")
	deleteFile("temp.txt")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveLogToBackupDir(destFilename)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	saveLogContent(DISP_BackupsCurrentDirectory + "\\" + destFilename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyFileToBackupDir(filename,destFilename)
{
	var filename = (typeof filename !== 'undefined') ? filename : __FILE__;
	getLatestValue("DISP_BackupsCurrentDirectory")
	copyFile(filename,DISP_BackupsCurrentDirectory+"\\"+destFilename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyDirToBackupDir(sourceDir,subdir)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	cmdLine = "xcopy "+sourceDir.replace("/","\\")+ " "+DISP_BackupsCurrentDirectory+subdir+"\\ /E /Y"
	exec(cmdLine)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyDirToBackupDirAndExecuteBat(sourceDir,subdir, batFile)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	cmdLine = "xcopy "+sourceDir.replace("/","\\")+ " "+DISP_BackupsCurrentDirectory+subdir+"\\ /E /Y"
	exec(cmdLine)
	return execute(DISP_BackupsCurrentDirectory+subdir+"\\"+batFile,DISP_BackupsCurrentDirectory+subdir,500000)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function zipData()
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	exec(getEGSEDirectory()+"\\rar.exe m -ep "+DISP_BackupsCurrentDirectory+"\\DATA\\data.rar "+DISP_BackupsCurrentDirectory+"\\DATA\\*.*")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function waitingForDDR3Empty()
{
	var req = getNextValue("OK_DDR3Occupation","toutes les 10 ms");
	
	do
	{
		waitingForNextValue(req)
		//print(OK_DDR3Occupation)
	}while(OK_DDR3Occupation > 0)
		abortOneRequest(req)
}

//--------------------------------------------
function firmware_valid(version, version_limit) {
	return (version>=parseInt(version_limit,16))
}

//--------------------------------------------
//LOAD PATERN TO DRE FUNCTION GENRATOR
//--------------------------------------------
function load_function(function_type) {

	path=".\\patterns\\"	
	switch (function_type)
	{		
	case "1":
		filename = "DAC_pattern_0.txt"
		break
	case "2":
		filename = "DAC_Pattern_0X1FFF.txt"
		break		
	case "3":
		filename = "DAC_Pattern_90FSR.txt"
		break
	case "4":
		filename = "DAC_Pattern_MAX.txt"
		break
	case "5":
		filename = "DAC_Pattern_Ramp0to16383.txt"
		break
	case "6":
		filename = "DAC_pattern_random16383.txt"
		break
	case "7":
		filename = "DAC_Pattern_10FSR_90FSR_Pixel4.txt"
		break
	case "8":
		filename = "DAC_Pattern_10FSR_50FSR_pixel4.txt"
		break
	case "9":
		filename = "DAC_Pattern_680_0x0_0x3FFF.txt"
		break	
	case "10":
		filename = "DAC_pattern_680_sine.txt"
		break
	case "11":
		filename = "DAC_Pattern_680_10FSR_pixel5_90.txt"
		break
	case "12":
		filename = "DAC_Pattern_680_Random34.txt"
		break
	default:			
		filename = "DAC_pattern_0.txt"	
	}
	print(">>---------------------------------------------------------")
	print("  - Loading test pattern values from file " + filename + "...")
	txt = readTextFile(path+filename);	
	BRAM_base_address = 0x8080; // 64
	values = new Array();
	print("  - Sending values to the firmware...");
	configureAckTimeout(0);
	// Supprime l'attente d'acknowledge entre le script et le dispatcher pour etre plus rapide
	for (index = 0; index < txt.length;++index)
	{		
		values[index] = parseInt(txt[index],16);
		// <<<<<<==========<<<<===== CHRISTOPHE A CHANGé LE 16 EN 10 pour C EN DECIMAL
		sendNewRegister((BRAM_base_address + index),(values[index]))	
		//print(BRAM_base_address + index);
	}
	//plot(values)
	configureAckTimeout(5000); // Reactivation de l'acknowledge
	print("  - Done!");
}

//---------------------------------------------------
//LOAD PULSE VALUES TO DRE FPA_SIM RAM
//---------------------------------------------------
function load_pulse(pulse_type) {

	path=".\\pulses\\"	
	switch (pulse_type)
	{		
	case "1":
		filename = "pulse_data_to_TDM.txt"
		break

	default:			
		filename = "pulse_data_to_TDM.txt"	
	}
	print(">>---------------------------------------------------------")
	print(">>  Loading test Pulse into the firmware")
	print("  - Loading values from file " + filename + "...")
	txt = readTextFile(path+filename);	
	BRAM_base_address = 0xA080; // 64
	values = new Array();
	print("  - Sending values to the firmware...");
	configureAckTimeout(0);
	// Supprime l'attente d'acknowledge entre le script et le dispatcher pour etre plus rapide
	for (index = 0; index < txt.length;++index)
	{		
		values[index] = parseInt(txt[index],16);
		print(values[index]);
		// <<<<<<==========<<<<===== CHRISTOPHE A CHANGé LE 16 EN 10 pour C EN DECIMAL
		sendNewRegister((BRAM_base_address + index),(values[index]))	
		//print(BRAM_base_address + index);
	}
	//plot(values)
	configureAckTimeout(5000); // Reactivation de l'acknowledge
	print("  - Done!");
}
////////////////////////////////////////////////////////////////////////////////
function mk_dumps(Channel_ID, duration_ms)
// This function makes DACSQ1, ADC ERROR INPUT and DACSQ2 dumps
// Input parameters:
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>  Measuring ADC and DACs data dumps")

	START_DUMP("",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
	
}
//----------------------------------------------------------------------------------------------------------------------------
function START_DUMP(dump_type,i,channelID,filename_comment){
	//This function starts a data dump in a specific acquisition mode (Starts the BBFB, starts the data acquisition).
	// Input parameters:
	//		dump_type (string)
	//			DP_DACSQ1_SCIENCE			corresponds to a dump 20MHz of the DACSQ1 signal and SCIENCE 5MHz
	//			DP_ERROR_5MHZ_SCIENCE	corresponds to a dump of the ERROR and SCIENCE 5MHz data 
	//			DP_DACSQ2_SCIENCE		corresponds to a dump 20MHz of the DACSQ2 signal and SCIENCE 5MHz
	//			DP_DACSQ1_DACSQ2			corresponds to a dump 20MHz of the DACSQ1 and DACSQ2 signal
	//			DP_ERROR_ADC			corresponds to a dump of ERROR_ADC raw DATA (16 Bits n and 16 bits n+1 data)

	//			DP_FEEDBACK_5MHz		corresponds to a dump of FEEDBACK 5MHz raw DATA (16 Bits 0 and 16 bits feedback data)

	//			SCIENCE					corresponds to a SCIENCE 5Mz DATA

	//			DP_FEEDBACK_5MHz		corresponds to a dump of FEEDBACK 5MHz raw DATA (16 Bits 0 and 16 bits feedback data)

	//			DP_ERROR_5MHz_FEEDBACK	corresponds to a dump of ERROR and FEEDBACK 5MHz data
	//		i (number)
	//			dump index that is included in the data file name
	//		channelID (number)
	//			Reference of the channel (0 or 1)
	//		filename_comment (string)
	// 			Extension to be used in the filename
	
	DUMP_MODE = 0
	error = false
	switch(dump_type){
		case "DACSQ1_SCIENCE":
			print("    > Starting dump of DACSQ1_SCIENCE data")
			DUMP_MODE = 0
			break
		case "ERROR5MHZ_SCIENCE":
			print("    > Starting dump of ERROR_5MHZSCIENCE data")
			DUMP_MODE = 1
			break
		case "DACSQ2_SCIENCE":
			print("    > Starting dump of DACSQ2_SCIENCE data")
			DUMP_MODE = 2
			break
		case "DACSQ1_DACSQ2":
			print("    > Starting dump of DACSQ1_DACSQ2 data")
			DUMP_MODE = 4
			break
		case "ERROR_ADC":
			print("    > Starting dump of ERROR_ADC data")
			DUMP_MODE = 5
			break
		case "FEEDBACK5MHZ":
			print("    > Starting dump of FEEDBACK5MHz data")
			DUMP_MODE = 6
			break
		case "SCIENCE_TM":
			print("    > Starting dump of SCIENCE_TM data")
			DUMP_MODE = 8
			break
		case "ERROR5MHZ_FEEDBACK":
			print("    > Starting dump of ERROR5MHz_FEEDBACK data")
			DUMP_MODE = 9
			break
		case "COUNT32":
			print("    > Starting dump of COUNT32 data")
			DUMP_MODE = 15
			break
		default:
			print("    > dump_type error")
			error = true
			break
		}
	if((channelID==0 || channelID==1) && error==false){
		waitingForDDR3Empty()
		sendOKResetDaqFifo()
		
		sendStartDumpedDataBackup2Filename(0, maDate()+"_"+(("0000" +(i).toString()).slice(-4))+"_"+dump_type+filename_comment+".dat","")
		DRE_Start_sending_TM_Selected_CMD(dump_type)
		//sendStartDREDaqAcquisition(0)
		//print(dump_type," DUMP File acquisition: ", i)
	}
}

//----------------------------------------------------------------------------------------------------------------------------
function STOP_DUMP(){
	// This function stops a dump data acquisition (No parameters)
	sendStopDumpedDataBackup()
	DRE_Stop_sending_TM_CMD()
	//sendStopDREDaqAcquisition()
	print("DUMP STOPED")  //  (default)
}
function sendNewRegister(address,value)
{
    sendConfigureDREOneRegister(((address & 0xFFFF) << 16) | (value & 0xFFFF), 0xFFFFFFFF)
}

////////////////////////////////////////////////////////////////////////////////
function clean_stop()
{
	column_ID=0
	KiNorm=0
	print(">>---------------------------------------------------------")
	DRE_Start_Stop_CMD(column_ID, Stop, KiNorm)
	sendStopDumpedDataBackup()
	DRE_Stop_sending_TM_CMD()
	sendStopSession()
}

//----------------------------------------------------------------------------------------------------------------------------