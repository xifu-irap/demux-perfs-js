//
//  Copyright (C) 2021-2030 Laurent Ravera, Christophe Oziol, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  demux-perfs-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//  laurent.ravera@irap.omp.eu
//  measure_ki.dscript
//

include("./tools.dscript")
include("./configure_demux.dscript")

// Stopping every previouly unstopped readout...
clean_stop()

//===========================================================
operator_name=get_operator_name()
session_name="ki measurement"
session_comment = "No comment"
getLatestValue("DRE_FirmwareId")
print("Firmware Id: ", DRE_FirmwareId.toString(16))
Channel_ID = 0
Ki=1
//===========================================================

sendStartSession(session_name, session_comment)

// Saving test parameters in a file
setAndMemorize( "Session_name", session_name)
setAndMemorize( "Session_comment", session_comment)
setAndMemorize( "Operator_name", operator_name)
setAndMemorize( "DEMUX Firmware Id", DRE_FirmwareId)
setAndMemorize( "Channel_Id", Channel_ID)
setAndMemorize( "Ki", Ki)

copyFileToBackupDir(getEGSEDirectory()+"\\parametersTF.dispatcher","HK\\parametersTF.dispatcher")  // copy HK limits

// Sauvegarde des scripts
getLatestValue("DISP_BackupsCurrentDirectory")
mkpath(DISP_BackupsCurrentDirectory+"\\OUTPUTS")
mkpath(DISP_BackupsCurrentDirectory+"\\SCRIPTS_GSE\\demux-perfs-js")
copyFileToBackupDir(".\\tools.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\tools.dscript") 
copyFileToBackupDir(".\\constants.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\constants.dscript") 
copyFileToBackupDir(".\\startup_demux.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\startup_demux.dscript") 
copyFileToBackupDir(".\\test_sequence.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\test_sequence.dscript") 
copyFileToBackupDir(".\\start_TM.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\start_TM.dscript") 
copyFileToBackupDir(".\\launcher.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\launcher.dscript") 
copyFileToBackupDir(".\\configure_demux.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\configure_demux.dscript") 
copyFileToBackupDir(__FILE__,"\\SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop()) // sauvegarde du script courant

saveMemorizedParametersToBackupDir("SCRIPTS_GSE\\scripts-gse\\"+__FILE__.split("/").pop().split(".")[0]+"_PARAMETERS.txt")
//===========================================================

print(">>---------------------------------------------------------")
print("Loading constant in firmware")
load_function("2")  // 0
DRE_function_amplitude_CMD(Channel_ID, 255)
DRE_function_timescale_CMD(Channel_ID, 1)
DRE_send_function_CMD(Channel_ID,1,1) // Activates the function for ever
waitMs(400)

for (ki_sequence=0; ki_sequence<3; ki_sequence++) {

	configure_demux(Ki, Channel_ID)

	switch (ki_sequence) {
		case 1:
			print("#########################################")
			print("> Using a Ki sequence with 2 alternatives values")
			configure_alternates_Ki(Channel_ID, Ki*KiNorm, 0.8*Ki*KiNorm)
			break
		case 2:
			print("#########################################")
			print("> Using a Ki sequence with 2 consecutive groups of values")
			configure_2_groups_of_Ki(Channel_ID, Ki*KiNorm, 0.8*Ki*KiNorm)
			break
		default:
			print("#########################################")
			print("> Using same Ki values for all the pixels")
			DRE_configureAllPixels_Ki(Channel_ID, KiNorm*Ki)
		}
		DRE_select_output_DACSQ1_CMD(Channel_ID, "feedback")
		DRE_select_output_DACSQ2_CMD(Channel_ID, "feedback")

		print(">>---------------------------------------------------------")
		print("Starting data acquisition")
		START_DUMP("DACSQ1_DACSQ2",0,Channel_ID,"_ki_check")
		waitMs(500)

		print(">>---------------------------------------------------------")
		print("Switching feedback to constant value")
		DRE_select_output_DACSQ1_CMD(Channel_ID, "function_out")
		waitMs(400)

		print(">>---------------------------------------------------------")
		print("Stoping data acquisition")
		STOP_DUMP()
	}
	
saveLogToBackupDir("scriptlog.txt")
sendStopSession()

onAbortScript()

print("Processing data ...")
output = copyDirToBackupDirAndExecuteBat("..\\..\\SCRIPTS_ANALYSE\\analysis-tools",".\\SCRIPTS_ANALYSE\\analysis-tools","do-analysis.bat")
addToFile(output)

print("End of session " + session_name)
print(">>---------------------------------------------------------")

clean_stop()	

//===========================================================
